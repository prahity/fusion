Link: https://leetcode.com/problems/search-a-2d-matrix/

/* Use a binary search through the first column and then use 
   a binary search in the row it is believed to be in*/

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int top = 0;
        int bottom = matrix.size() - 1;
        int mid = (top + bottom) / 2;
        while(top < bottom) {
            if(matrix[mid][0] > target) {
                bottom = mid - 1;
            } else if (matrix[mid][0] < target) {
                top = mid + 1;
            } else {
                return true;
            }
            mid = (top + bottom) / 2;
        }
        if(matrix[mid][0] > target) {
            mid--;
            if(mid < 0) {
                return false;
            }
        }
        return binarySearch(matrix[mid],target);
    }

    bool binarySearch(vector<int>& row, int target) {
        cout << row[0];
        int right = row.size() - 1;
        int left = 0;
        int mid = (left + right) / 2;
        while(left <= right) {
            if(row[mid] > target) {
                right = mid - 1;
            } else if (row[mid] < target) {
                left = mid +1;
            } else {
                return true;
            }
            mid = (right + left) / 2;
        }
        return false;
    }
};
